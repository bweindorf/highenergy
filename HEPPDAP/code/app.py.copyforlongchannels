import os
import numpy as np
import matplotlib.pyplot as plt
import wx
import wx.lib.plot.polyobjects as po
import wx.lib.agw.aui as aui
import wx.lib.mixins.inspection as wit
from wx.lib.masked import NumCtrl
import matplotlib as mpl
from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas
from matplotlib.backends.backend_wxagg import NavigationToolbar2WxAgg as NavigationToolbar
#import wx.lib.agw.multidirdialog as MDD
import wx.lib.inspection
from read_data import read_data
import pandas as pd

class MainApp(wx.App):
    
    def __init__(self):
        super().__init__(clearSigInt=True)

    #init frame
        frame = MainFrame()
        frame.SetSize(1000,800)
        frame.Show()


class MainFrame(wx.Frame):
    
    def __init__(self, title="Python Data Analysis", pos=(100,100)):
        super().__init__(None, title=title, pos=pos)
        #initilize frame
       
        self.InitFrame()

    def InitFrame(self):
        # Make sizer and add panels to sizer to for auto-resizing
        sizer=wx.BoxSizer(wx.HORIZONTAL)
        self.apanel = PlotNotebook(self, id=-1, pos=(100,100), size=(300,300))
        self.panel = MainPanel(self, id=wx.ID_ANY, pos=(0,100), size=(100,100))
        sizer.Add(self.panel, 1, wx.EXPAND|wx.ALL, 5)
        sizer.Add(self.apanel, 3, wx.ALIGN_TOP|wx.EXPAND, 0)
        self.SetSizer(sizer)



class PlotNotebook(wx.Panel):
    def __init__(self, parent, id, pos, size):
        wx.Panel.__init__(self, parent, id, pos, size)
        self.parent = parent
        atext = wx.StaticText(self, wx.ID_ANY, "Analysis Side")
        self.nb = aui.AuiNotebook(self)
        self.Bind(aui.EVT_AUINOTEBOOK_PAGE_CHANGED, self.on_nb_tab_changed, self.nb)
        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(atext, 0, wx.TOP|wx.CENTER)
        sizer.Add(self.nb, 5, wx.TOP|wx.EXPAND)
        self.SetSizer(sizer)

    def add(self, name="plot"):
        page = Plot(self.nb)
        page.name=name
        self.nb.AddPage(page, name)
        return page.figure

    def on_nb_tab_changed(self, event):
        mainpanel = self.parent.panel
        for board in mainpanel.channelmatrix:
            for channel in board:
                if channel.IsChecked():
                    index = int(self.nb.GetCurrentPage().name.split()[1]) - 1
                    mainpanel.peaktimeval.SetLabel(str(mainpanel.data.stats['single_channel'][board.index(channel)]["peak_time"][index]))
                    mainpanel.risetimeval.SetLabel(str(mainpanel.data.stats['single_channel'][board.index(channel)]["rise_time"][index]))
                    mainpanel.risetimeval.SetLabel(str(mainpanel.data.stats['single_channel'][board.index(channel)]["rise_time"][index]))
                    mainpanel.amplitudeval.SetLabel(str(mainpanel.data.stats['single_channel'][board.index(channel)]["amplitude"][index]))



#        mainpanel.peaktimeval.SetLabel(str(mainpanel.data.peaktimes[index]))
#        mainpanel.falltimeval.SetLabel(str(mainpanel.data.falltimes[index]))
#        mainpanel.chargeval.SetLabel(str(mainpanel.data.charges[index]))
        mainpanel.plotter.Layout()
       


class Plot(wx.Panel):
    def __init__(self, parent, id=-1, dpi=None, **kwargs):
        wx.Panel.__init__(self, parent, id=id, **kwargs)
        self.figure = mpl.figure.Figure(dpi=dpi, figsize=(2, 2))
        self.canvas = FigureCanvas(self, -1, self.figure)
        self.toolbar = NavigationToolbar(self.canvas)
        self.toolbar.Realize()

        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(self.canvas, 1, wx.EXPAND)
        sizer.Add(self.toolbar, 0, wx.LEFT | wx.EXPAND)
        self.SetSizer(sizer)

class AmplitudeSelect():
    def __init__(self, parent, ampsizer, board):
        self.board = board
        self.parent = parent
        self.ampsizer = ampsizer

    def buildsizers(self):
        boardtext = wx.StaticText(self.parent, id=wx.ID_ANY, label ="Board %d" % self.board)
        self.ampsizer.Add(boardtext, 0, wx.ALL|wx.ALIGN_CENTER, 0)
        channels = []
        for i in range(4):
            sizer = wx.BoxSizer(wx.HORIZONTAL)
            amp = wx.StaticText(self.parent, id=wx.ID_ANY, label="Channel %d Amplitude (mv): " % (i + 1))
            ampval = wx.SpinCtrl(self.parent, wx.ID_ANY)
            ampenable = wx.CheckBox(self.parent, id=wx.ID_ANY, label = "Enable")
            sizer.Add(amp, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN|wx.ALIGN_LEFT, 0)
            sizer.Add(ampval, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN|wx.ALIGN_CENTER, 0)
            sizer.Add(ampenable, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN|wx.ALIGN_RIGHT, 0)
            self.ampsizer.Add(sizer, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN|wx.ALIGN_LEFT,0)
            channels.append(sizer)

        return channels
        
class MainPanel(wx.Panel):
    
    def __init__(self, parent, id, pos, size):
        super().__init__(parent, id, pos, size)
        #need to add parent attribute so that plotter can call within this class, timing issue here????
        self.parent=parent
        self.plotter = parent.apanel
        self.InitForm()        
        self.currentDirectory = os.getcwd()
        

    def InitForm(self):
        self.oldfile = ""
        #Make the Sizers that will always be shown
        self.mainSizer = wx.BoxSizer(wx.HORIZONTAL)
        controlSizer = wx.BoxSizer(wx.VERTICAL)
        resultSizer = wx.BoxSizer(wx.VERTICAL)

        #Control Sizer:
        #Add title
        ctext = wx.StaticText(self, wx.ID_ANY, "Controller Side")
        controlSizer.Add(ctext, 0, wx.CENTER|wx.TOP, 0)
        #Add Analyze Button
        analyze_button = wx.Button(self, wx.ID_ANY, 'Analyze')
        controlSizer.Add(analyze_button, 0, wx.ALL, 5)
        #Add Button Sizer to contain 'Previous' and 'Next' Buttons (Hidden on start up)
        buttonSizer = wx.BoxSizer(wx.HORIZONTAL)
        self.next_button = wx.Button(self, wx.ID_ANY, 'Next')
        self.next_button.Hide()
        self.prev_button = wx.Button(self, wx.ID_ANY, "Previous")
        self.prev_button.Hide()
        self.Bind(wx.EVT_BUTTON, self.next, self.next_button)
        self.Bind(wx.EVT_BUTTON, self.previous, self.prev_button)
        self.Bind(wx.EVT_BUTTON, self.analyze, analyze_button)
        buttonSizer.Add(self.prev_button, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN, 5)
        buttonSizer.Add(self.next_button, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN, 5)
        controlSizer.Add(buttonSizer, 0, wx.ALL|wx.EXPAND, 0)
        #Add FileSizer for file input
        fileSizer = wx.BoxSizer(wx.VERTICAL)
        self.filename = wx.StaticText(self, id=wx.ID_ANY, label="No File Currently Selected")
        browser = wx.Button(self, wx.ID_ANY, 'Browse')
        browser.Bind(wx.EVT_BUTTON, self.onOpenFile)
        self.fname = "No File Currently Selected"
        fileSizer.Add(self.filename, 0, wx.ALL, 0)
        fileSizer.Add(browser, 0, wx.ALL|wx.CENTER, 0)
        controlSizer.Add(fileSizer, 0, wx.ALL|wx.EXPAND, 0)
        #Create Sizer for Channel Selectors
        self.board1text = wx.StaticText(self, wx.ID_ANY, "Board 1")
        self.board2text = wx.StaticText(self, wx.ID_ANY, "Board 2")
        board1Sizer = wx.BoxSizer(wx.VERTICAL)
        board2Sizer = wx.BoxSizer(wx.VERTICAL)
        board1Sizer.Add(self.board1text, 0, wx.ALL|wx.ALIGN_LEFT|wx.RESERVE_SPACE_EVEN_IF_HIDDEN, 0)
        board2Sizer.Add(self.board2text, 0, wx.ALL|wx.ALIGN_LEFT|wx.RESERVE_SPACE_EVEN_IF_HIDDEN, 0)
        self.board1text.Hide()
        self.board2text.Hide()
        self.channel11 = wx.CheckBox(self, id=wx.ID_ANY, label = "Channel 1")
        self.channel12 = wx.CheckBox(self, id=wx.ID_ANY, label = "Channel 2")
        self.channel13 = wx.CheckBox(self, id=wx.ID_ANY, label = "Channel 3")
        self.channel14 = wx.CheckBox(self, id=wx.ID_ANY, label = "Channel 4")
        self.channel21 = wx.CheckBox(self, id=wx.ID_ANY, label = "Channel 1")
        self.channel22 = wx.CheckBox(self, id=wx.ID_ANY, label = "Channel 2")
        self.channel23 = wx.CheckBox(self, id=wx.ID_ANY, label = "Channel 3")
        self.channel24 = wx.CheckBox(self, id=wx.ID_ANY, label = "Channel 4")
        #Create matrix of channel checkboxes for indexing purposes
        self.channelmatrix = [[self.channel11, self.channel12, self.channel13, self.channel14], [self.channel21, self.channel22, self.channel23, self.channel24]]
        #Add post analysis triggers
        dataselectorSizer = wx.BoxSizer(wx.HORIZONTAL)
        
    
        #Channel Select
        for board in self.channelmatrix:
             for channel in board:
                 channel.Hide()
        board1Sizer.Add(self.channel11, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN, 0)
        board1Sizer.Add(self.channel12, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN, 0)
        board1Sizer.Add(self.channel13, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN, 0)
        board1Sizer.Add(self.channel14, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN, 0)
        board2Sizer.Add(self.channel21, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN, 0)
        board2Sizer.Add(self.channel22, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN, 0)
        board2Sizer.Add(self.channel23, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN, 0)
        board2Sizer.Add(self.channel24, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN, 0)
        dataselectorSizer.Add(board1Sizer, 0, wx.ALL|wx.ALIGN_LEFT, 0)
        dataselectorSizer.Add(board2Sizer, 0, wx.ALL|wx.ALIGN_CENTER, 0)
        controlSizer.Add(dataselectorSizer, 0, wx.ALL|wx.ALIGN_CENTER|wx.RESERVE_SPACE_EVEN_IF_HIDDEN, 0)

        #Timing Select
        self.timeSizer = wx.BoxSizer(wx.VERTICAL)
        timeselectorSizer = wx.BoxSizer(wx.HORIZONTAL)
        timing = wx.StaticText(self, id=wx.ID_ANY, label="Timing Difference (ns): ")
        self.tsetting = wx.SpinCtrl(self, wx.ID_ANY)
        self.tsettingenable = wx.CheckBox(self, id=wx.ID_ANY, label = "Enable")
        timeselectorSizer.Add(timing, 0, wx.ALL|wx.ALIGN_LEFT, 0)
        timeselectorSizer.Add(self.tsetting, 0, wx.ALL|wx.ALIGN_CENTER, 0)
        timeselectorSizer.Add(self.tsettingenable, 0, wx.ALL|wx.ALIGN_RIGHT, 0)
        timechannelselect = wx.BoxSizer(wx.HORIZONTAL)
        self.channel1 = wx.Choice(self, id=wx.ID_ANY, choices = ["None"])
        self.channel2 = wx.Choice(self, id=wx.ID_ANY, choices = ["None"])
        timechannelselect.Add(self.channel1, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN, 0)
        timechannelselect.Add(self.channel2, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN, 0)
        self.timeSizer.Add(timeselectorSizer, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN, 0)
        self.timeSizer.Add(timechannelselect, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN|wx.ALIGN_CENTER, 0)
        self.timeSizer.ShowItems(False)
        controlSizer.Add(self.timeSizer, 0, wx.ALL|wx.ALIGN_LEFT|wx.RESERVE_SPACE_EVEN_IF_HIDDEN, 0)

        #Amplitude(s) Select
        self.ampsizer = wx.BoxSizer(wx.VERTICAL)
        self.ampmatrix = [[AmplitudeSelect(self, self.ampsizer, 1).buildsizers()], [AmplitudeSelect(self, self.ampsizer, 2).buildsizers()]]

        

        #Board 1 Channel 1
        self.ampb1text = wx.StaticText(self, id=wx.ID_ANY, label ="Board 1")
        amp11sizer = wx.BoxSizer(wx.HORIZONTAL)
        amp11 = wx.StaticText(self, id=wx.ID_ANY, label="Channel 1 Amplitude (mv): ")
        self.amp11 = wx.SpinCtrl(self, wx.ID_ANY)
        self.amp11enable = wx.CheckBox(self, id=wx.ID_ANY, label = "Enable")
        amp11sizer.Add(amp11, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN|wx.ALIGN_LEFT, 0)
        amp11sizer.Add(self.amp11, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN|wx.ALIGN_CENTER, 0)
        amp11sizer.Add(self.amp11enable, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN|wx.ALIGN_RIGHT, 0)
        self.ampsizer.Add(self.ampb1text, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN|wx.ALIGN_CENTER, 0)
        self.ampsizer.Add(amp11sizer, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN|wx.ALIGN_LEFT, 0)
        #Board 1 Channel 2
        amp12sizer = wx.BoxSizer(wx.HORIZONTAL)
        amp12 = wx.StaticText(self, id=wx.ID_ANY, label="Channel 2 Amplitude (mv): ")
        self.amp12 = wx.SpinCtrl(self, wx.ID_ANY)
        self.amp12enable = wx.CheckBox(self, id=wx.ID_ANY, label = "Enable")
        amp12sizer.Add(amp12, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN|wx.ALIGN_LEFT, 0)
        amp12sizer.Add(self.amp12, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN|wx.ALIGN_CENTER, 0)
        amp12sizer.Add(self.amp12enable, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN|wx.ALIGN_RIGHT, 0)
        self.ampsizer.Add(amp12sizer, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN|wx.ALIGN_LEFT, 0)
        #Board 1 Channel 3
        amp13sizer = wx.BoxSizer(wx.HORIZONTAL)
        amp13 = wx.StaticText(self, id=wx.ID_ANY, label="Channel 3 Amplitude (mv): ")
        self.amp13 = wx.SpinCtrl(self, wx.ID_ANY)
        self.amp13enable = wx.CheckBox(self, id=wx.ID_ANY, label = "Enable")
        amp13sizer.Add(amp13, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN|wx.ALIGN_LEFT, 0)
        amp13sizer.Add(self.amp13, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN|wx.ALIGN_CENTER, 0)
        amp13sizer.Add(self.amp13enable, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN|wx.ALIGN_RIGHT, 0)
        self.ampsizer.Add(amp13sizer, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN|wx.ALIGN_LEFT, 0)
        #Board 1 Channel 4
        amp14sizer = wx.BoxSizer(wx.HORIZONTAL)
        amp14 = wx.StaticText(self, id=wx.ID_ANY, label="Channel 4 Amplitude (mv): ")
        self.amp14 = wx.SpinCtrl(self, wx.ID_ANY)
        self.amp14enable = wx.CheckBox(self, id=wx.ID_ANY, label = "Enable")
        amp14sizer.Add(amp14, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN|wx.ALIGN_LEFT, 0)
        amp14sizer.Add(self.amp14, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN|wx.ALIGN_CENTER, 0)
        amp14sizer.Add(self.amp14enable, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN|wx.ALIGN_RIGHT, 0)
        self.ampsizer.Add(amp14sizer, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN|wx.ALIGN_LEFT, 0)
        #Board 2 Channel 1
        self.ampb2text = wx.StaticText(self, id=wx.ID_ANY, label ="Board 2")
        amp21sizer = wx.BoxSizer(wx.HORIZONTAL)
        amp21 = wx.StaticText(self, id=wx.ID_ANY, label="Channel 1 Amplitude (mv): ")
        self.amp21 = wx.SpinCtrl(self, wx.ID_ANY)
        self.amp21enable = wx.CheckBox(self, id=wx.ID_ANY, label = "Enable")
        amp21sizer.Add(amp21, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN|wx.ALIGN_LEFT, 0)
        amp21sizer.Add(self.amp21, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN|wx.ALIGN_CENTER, 0)
        amp21sizer.Add(self.amp21enable, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN|wx.ALIGN_RIGHT, 0)
        self.ampsizer.Add(self.ampb2text, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN|wx.ALIGN_CENTER, 0)
        self.ampsizer.Add(amp21sizer, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN|wx.ALIGN_LEFT, 0)
        #Board 2 Channel 2
        amp22sizer = wx.BoxSizer(wx.HORIZONTAL)
        amp22 = wx.StaticText(self, id=wx.ID_ANY, label="Channel 2 Amplitude (mv): ")
        self.amp22 = wx.SpinCtrl(self, wx.ID_ANY)
        self.amp22enable = wx.CheckBox(self, id=wx.ID_ANY, label = "Enable")
        amp22sizer.Add(amp22, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN|wx.ALIGN_LEFT, 0)
        amp22sizer.Add(self.amp22, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN|wx.ALIGN_CENTER, 0)
        amp22sizer.Add(self.amp22enable, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN|wx.ALIGN_RIGHT, 0)
        self.ampsizer.Add(amp22sizer, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN|wx.ALIGN_LEFT, 0)
        #Board 2 Channel 3
        amp23sizer = wx.BoxSizer(wx.HORIZONTAL)
        amp23 = wx.StaticText(self, id=wx.ID_ANY, label="Channel 3 Amplitude (mv): ")
        self.amp23 = wx.SpinCtrl(self, wx.ID_ANY)
        self.amp23enable = wx.CheckBox(self, id=wx.ID_ANY, label = "Enable")
        amp23sizer.Add(amp23, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN|wx.ALIGN_LEFT, 0)
        amp23sizer.Add(self.amp23, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN|wx.ALIGN_CENTER, 0)
        amp23sizer.Add(self.amp23enable, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN|wx.ALIGN_RIGHT, 0)
        self.ampsizer.Add(amp23sizer, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN|wx.ALIGN_LEFT, 0)
        #Board 2 Channel 4
        amp24sizer = wx.BoxSizer(wx.HORIZONTAL)
        amp24 = wx.StaticText(self, id=wx.ID_ANY, label="Channel 4 Amplitude (mv): ")
        self.amp24 = wx.SpinCtrl(self, wx.ID_ANY)
        self.amp24enable = wx.CheckBox(self, id=wx.ID_ANY, label = "Enable")
        amp24sizer.Add(amp24, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN|wx.ALIGN_LEFT, 0)
        amp24sizer.Add(self.amp24, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN|wx.ALIGN_CENTER, 0)
        amp24sizer.Add(self.amp24enable, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN|wx.ALIGN_RIGHT, 0)
        self.ampsizer.Add(amp24sizer, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN|wx.ALIGN_LEFT, 0)
        
        #Create amlitude matrix for later reference
       # self.ampmatrix=[[amp11sizer, amp12sizer, amp13sizer, amp14sizer], [amp21sizer, amp22sizer, amp23sizer, amp24sizer]]
       # self.ampsizer.ShowItems(False)        
        controlSizer.Add(self.ampsizer, 0, wx.ALL|wx.ALIGN_LEFT|wx.RESERVE_SPACE_EVEN_IF_HIDDEN, 0)

        #Add graphing button
        self.graphbutton = wx.Button(self, wx.ID_ANY, "Plot")
        self.Bind(wx.EVT_BUTTON, self.graphdata, self.graphbutton)
        self.changechannelbutton = wx.Button(self, wx.ID_ANY, "Reconfigure Channels")
        self.Bind(wx.EVT_BUTTON, self.changechannel, self.changechannelbutton)
        #Add Option to go to specific event
        self.gototext = wx.StaticText(self, wx.ID_ANY, "Go To Event #: ")
        self.goto = wx.SpinCtrl(self, wx.ID_ANY)
        self.gotobutton = wx.Button(self, wx.ID_ANY, "GO!")
        self.Bind(wx.EVT_BUTTON, self.gotoevent, self.gotobutton)
        self.gotosizer = wx.BoxSizer(wx.HORIZONTAL)
        self.gotosizer.Add(self.gototext, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN, 0)
        self.gotosizer.Add(self.goto, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN, 0)
        self.gotosizer.Add(self.gotobutton, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN, 0)
        graphSizer = wx.BoxSizer(wx.VERTICAL)
        graphSizer.Add(self.graphbutton, 0, wx.ALL|wx.ALIGN_CENTER|wx.RESERVE_SPACE_EVEN_IF_HIDDEN,0)
        graphSizer.Add(self.changechannelbutton, 0, wx.ALL|wx.ALIGN_CENTER|wx.RESERVE_SPACE_EVEN_IF_HIDDEN,0)
        graphSizer.Add(self.gotosizer, 0, wx.ALL|wx.ALIGN_CENTER|wx.RESERVE_SPACE_EVEN_IF_HIDDEN,0)
        self.graphbutton.Hide()
        self.changechannelbutton.Hide()
        self.gototext.Hide()
        self.goto.Hide()
        self.gotobutton.Hide()
        controlSizer.Add(graphSizer, 0, wx.ALL|wx.ALIGN_CENTER, 0)        
        #Create blank sizer for separation between end of filesizer and beginning of statistics(characteristics) sizer
        controlSizer.Add(1000,300,0)


        #Add statistics (characteristics) sizer 

        self.stats = wx.BoxSizer(wx.VERTICAL)
        stats = wx.StaticText(self, id=wx.ID_ANY, label = "Statistics")
        #Create Horizontal Sizers for Key Value Pairs
        charkeyvalsizer = wx.BoxSizer(wx.HORIZONTAL)
        #Create Key and Value sizers
        keysizer=wx.BoxSizer(wx.VERTICAL)
        valsizer=wx.BoxSizer(wx.VERTICAL)
        #Create Labels (Keys) for each Characteristic
        risetime = wx.StaticText(self, id=wx.ID_ANY, label = "Rise Time")
        peaktime = wx.StaticText(self, id=wx.ID_ANY, label = "Peak Time")
        falltime = wx.StaticText(self, id=wx.ID_ANY, label = "Fall Time")
        charge = wx.StaticText(self, id=wx.ID_ANY, label = "Charge")
        amplitude = wx.StaticText(self, id=wx.ID_ANY, label = "Amplitude")
        #Create blank labels (Values) for the actual values to go in  
        self.risetimeval = wx.StaticText(self, id=wx.ID_ANY, label = "Rise Val")
        self.peaktimeval = wx.StaticText(self, id=wx.ID_ANY, label = "Peak Val")
        self.falltimeval = wx.StaticText(self, id=wx.ID_ANY, label = "Fall Val")
        self.chargeval = wx.StaticText(self, id=wx.ID_ANY, label = "Charge Val")
        self.amplitudeval = wx.StaticText(self, id=wx.ID_ANY, label = "Amplitude Val")
        #Add keys and values to respective sizers
        keysizer.Add(risetime, 0, wx.ALIGN_LEFT,0)
        keysizer.Add(peaktime, 0, wx.ALIGN_LEFT, 0)
        keysizer.Add(falltime, 0, wx.ALIGN_LEFT, 0)
        keysizer.Add(charge, 0, wx.ALIGN_LEFT, 0)
        keysizer.Add(amplitude, 0, wx.ALIGN_LEFT, 0)
        valsizer.Add(self.risetimeval, 0, wx.ALIGN_LEFT, 0)
        valsizer.Add(self.peaktimeval, 0, wx.ALIGN_LEFT, 0)
        valsizer.Add(self.falltimeval, 0, wx.ALIGN_LEFT, 0)
        valsizer.Add(self.chargeval, 0, wx.ALIGN_LEFT, 0)
        valsizer.Add(self.amplitudeval, 0, wx.ALIGN_LEFT, 0)
        #Add key and value pairs to charkeyvalsizer
        charkeyvalsizer.Add(keysizer, 0, wx.ALL, 0)
        #Blank sizer for formatting purposes
        charkeyvalsizer.Add(20,0,0)
        charkeyvalsizer.Add(valsizer, 0, wx.ALL, 0)
        #Add characteristic labels to stats sizer
        self.stats.Add(stats, 0, wx.ALIGN_CENTER, 0)
        self.stats.Add(charkeyvalsizer, 0, wx.ALIGN_LEFT, 0)
        self.stats.ShowItems(False)
        #Add stats sizer to control sizer
        controlSizer.Add(self.stats, 0, wx.ALL|wx.EXPAND|wx.RESERVE_SPACE_EVEN_IF_HIDDEN, 0)
        #Add amplitude (waveform) and charge spectrum buttons
        spectrumsizer=wx.BoxSizer(wx.HORIZONTAL)
        self.waveformspec=wx.Button(self, id=wx.ID_ANY, label="Amplitudes")
        self.chargespec=wx.Button(self, id=wx.ID_ANY, label="Charges")
        self.Bind(wx.EVT_BUTTON, self.plotchargespec, self.chargespec)
        spectrumsizer.Add(self.waveformspec, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN, 0)
        self.Bind(wx.EVT_BUTTON, self.plotwaveformspec, self.waveformspec)
        spectrumsizer.Add(self.chargespec, 0, wx.ALL|wx.RESERVE_SPACE_EVEN_IF_HIDDEN, 0)
        self.waveformspec.Hide()
        self.chargespec.Hide()
        controlSizer.Add(100,50,0)
        controlSizer.Add(spectrumsizer, 0, wx.ALIGN_CENTER, 0)          
        #Add sizers to the main sizer (note the result sizer is blank and will be used when a button is clicked)
        self.mainSizer.Add(controlSizer, 1, wx.ALL, 0)
        self.mainSizer.Add(resultSizer, 1, wx.ALL, 5)
        # Final Configs...    
        self.SetSizer(self.mainSizer)
        self.mainSizer.Fit(self)
        self.Layout()


    def onOpenFile(self, event):
#            """
#           Create and show the Open FileDialog
#          """
        print("File Browser Now Open")
        dlg = wx.FileDialog(
        self, message="Choose a file Test Message",
        defaultDir=self.currentDirectory, 
        defaultFile="",
        wildcard="dat files (*.dat)|*.dat",
        style=wx.FD_OPEN | wx.FD_MULTIPLE | wx.FD_CHANGE_DIR
        )
        if dlg.ShowModal() == wx.ID_OK:
            filepath = ""
            paths = dlg.GetPaths()
            name = paths[0]
            dname = paths[0].split("/")[-1]
            self.filename.SetLabel(dname)
            self.fname = name
        dlg.Destroy()
#        print("File Browser Destoyed")
        return 

# Note about syntax, usually you Bind functions by calling them by name (myFunc as opposed to
# myFunc() which would cause the function to execute immediately upon binding. If you want to bind a function
# with arguments to the button, the outerfunction can be defined to have an inner function. The outer function
# will carry the actual arguments while inner one will carry only the event, since the outerfunction returns the
# inner one, the inner one will have all the necessary arguments and only be called upon the event...
    def analyze(self, event):
        f = self.fname
        #Check to see if Analyze Button Has been clicked yet
        if f != "No File Currently Selected" and f != self.oldfile:
            self.oldfile = f
            self.changechannelbutton.Hide()
            self.gototext.Hide()
            self.goto.Hide()
            self.gotobutton.Hide()
            self.waveformspec.Show()
            self.chargespec.Show()
            for board in self.channelmatrix:
                for channel in board:
                    channel.SetValue(False)
                    channel.Hide()
            self.Layout()            
            while(self.plotter.nb.GetPageCount()):
                self.plotter.nb.DeletePage(0)

            self.data = Data(f)
            self.goto.SetMin(1)
            self.goto.SetMax(len(self.data.events))
            self.goto.SetValue(1)
            self.showchannels()
        else:
            return


    def showchannels(self):
        #Iterate through the channels, and display the ones that read_data has available
        self.graphbutton.Show()
        #availableboards = self.data.numboards
        availablechannels = self.data.loadedchannels
        numchannels = len(availablechannels[0]) + len(availablechannels[1]) 
        if numchannels > 1:
            self.timeSizer.ShowItems(True)
            self.mainSizer.Layout()

        if len(availablechannels[0]) > 0:
            self.board1text.Show()
            self.ampb1text.Show()

        if len(availablechannels[1]) > 0:
            self.board2text.Show()
            self.ampb2text.Show()
        
        #Add String labels to drop down menus for timing select
        strings = []
        b = 0
        for board in availablechannels:
            b += 1
            c = 0
            for channel in board:
                c += 1
                string = "B%d C%d" % (b, c)
                self.channel1.Append(string)
                self.channel2.Append(string)
                self.channelmatrix[availablechannels.index(board)][channel - 1].Show()
                self.channelmatrix[availablechannels.index(board)][channel - 1].Enable()
                self.ampmatrix[availablechannels.index(board)][channel - 1].ShowItems(True)
                

    def changechannel(self, event):
        # Allow user to check or uncheck boxes, will result in data being regraphed (will not run read_data again)
        self.timeSizer.ShowItems(True)
        self.ampsizer.ShowItems(True)
        self.mainSizer.Layout()
        self.prev_button.Hide()
        self.next_button.Hide()
        self.graphbutton.Show()
        self.changechannelbutton.Hide()
        self.gototext.Hide()
        self.goto.Hide()
        self.gotobutton.Hide()
        availableboards = self.data.numboards
        availablechannels = self.data.loadedchannels
        for board in availablechannels:
            for channel in board:
                self.channelmatrix[availablechannels.index(board)][channel - 1].Enable()
        
                
                   
    def graphdata(self, event):
            if self.tsettingenable.IsChecked():
                self.timingdiff = self.tsetting.GetValue()
            numchannels = 0
            for board in self.channelmatrix:
                for channel in board:
                    if channel.IsChecked():
                        numchannels += 1
                    else:
                        continue

            if numchannels > 0:
                if numchannels == 1:
                    self.stats.ShowItems(True)
                else:
                    self.stats.ShowItems(False)
   
            #Clean the current graph and plot the data if at least one checkbox is checked
                self.timeSizer.ShowItems(False)
                self.ampsizer.ShowItems(False)
                while(self.plotter.nb.GetPageCount()):
                    self.plotter.nb.DeletePage(0)
                
                self.index = 0 
                self.next_button.Show()
                self.prev_button.Show()
                self.Layout()
                axes = self.plotter.add('Event 1').gca()
                axes.set_title("Voltage vs Time")
                axes.set_ylabel("Voltage (V)")
                axes.set_xlabel("Time (ns)")
                colors = ["Black", "Blue", "Green"]
                axes.grid(True)
                i = 0
                self.graphbutton.Hide()
                self.changechannelbutton.Show()
                self.gototext.Show()
                self.goto.Show()
                self.gotobutton.Show()
                #Need more info on how data from 2nd board is passed in order to use 2nd board
                for board in self.channelmatrix:
                    for channel in board:
                        channel.Disable()
                        if channel.IsChecked():
                            while True:
                                print("True")
                                if self.tsettingenable.IsChecked():
                                    print("Checked")
                                    channel1 = self.channel1.GetString(self.channel1.GetSelection())
                                    channel2 = self.channel2.GetString(self.channel2.GetSelection())
                                    eventfound = False
                                    while not eventfound:
                                        print("Event not found")
                                        ptime1 = float(self.data.stats['single_channel'][int(channel1[-1]) - 1]["peak_time"][self.index])  
                                        ptime2 = float(self.data.stats['single_channel'][int(channel2[-1]) - 1]["peak_time"][self.index])  
                                        diff = abs(ptime1 - ptime2)
                                        print(diff)
                                        if diff < self.timingdiff: #Threshold
                                            print(self.index, ptime1, ptime2, diff)
                                            eventfound = True  
                                        
                                        else:
                                            self.index += 1
                                            continue

                                #Convert this to a loop later...
                                if self.amp11enable.IsChecked():
                                    amp = float(self.data.stats['single_channel'][0]["amplitude"][self.index]) 
                                    if amp < self.amp11.GetValue()/1000:
                                        self.index += 1
                                        continue
                           
           
                                if self.amp12enable.IsChecked():
                                    amp = float(self.data.stats['single_channel'][1]["amplitude"][self.index]) 
                                    if amp < self.amp12.GetValue()/1000:
                                        self.index += 1
                                        continue
                                   
                                                              

                                break

                            plt = self.data.events[self.index][board.index(channel)]
                            axes.plot(plt, label="Channel " + str(board.index(channel) + 1), color = colors[i])
                            i += 1
                            axes.legend()
                        else:
                            continue

            else:
                print("No Channel Selected")    
                return
                #axes.plot([self.data.risetimes[0], self.data.risetimes[0]], [0, 4], color="Red")
                #axes.plot([self.data.falltimes[0], self.data.falltimes[0]],[0,4], color="Red")
        
           


    def add(self, name="plot"):
        page = Plot(self.nb)
        self.nb.AddPage(page, name)
        return page.figure


    def next(self, event):
      
        #Check to see if current page is last one, if it is then make the next one
        if self.plotter.nb.GetSelection() == self.plotter.nb.GetPageCount() -1:
            if self.tsettingenable.IsChecked(): #Check to see if user enabled timing discrimination
                channel1 = self.channel1.GetString(self.channel1.GetSelection())
                channel2 = self.channel2.GetString(self.channel2.GetSelection())
                eventfound = False
                while not eventfound: #Go through until an event falls within timing restriction, automatically changes self.index
                    self.index += 1
                    ptime1 = float(self.data.stats['single_channel'][int(channel1[-1]) - 1]["peak_time"][self.index])  
                    ptime2 = float(self.data.stats['single_channel'][int(channel2[-1]) - 1]["peak_time"][self.index])  
                    diff = abs(ptime1 - ptime2)
                    if diff < self.timingdiff: #Threshold
                        print(self.index, ptime1, ptime2, diff)
                        eventfound = True  
                                        
                    else:
                        continue
            else:
                self.index += 1
      

            colors = ["Black", "Blue", "Green"]
            axes = self.plotter.add('Event {}'.format(self.index + 1)).gca()
            i = 0
            for board in self.channelmatrix:
                for channel in board:
                    if channel.IsChecked():
                        plt = self.data.events[self.index][board.index(channel)]
                        axes.plot(plt, label="Channel " + str(board.index(channel) + 1), color = colors[i])
                        i += 1
                    else:
                        continue

            axes.set_title("Voltage vs Time")
            axes.set_ylabel("Voltage (V)")
            axes.set_xlabel("Time (ns)")
            axes.legend()
            self.plotter.nb.AdvanceSelection()
            self.Layout()
            self.plotter.Layout()
            
        else:
            self.plotter.nb.AdvanceSelection(True)
        return

    def previous(self, event):
        if self.index == 0:
            return
        else:
            self.index -= 1
            self.plotter.nb.AdvanceSelection(False)
            return

## Use with threading, except CPU will be eaten up
#    def setstats(self):
#        while True:
#                continue


    def gotoevent(self, event):
        eventnum = self.goto.GetValue() - 1
        if eventnum < self.plotter.nb.GetPageCount():
            print("Error, please select event that has not already been displayed")
        else:
            axes = self.plotter.add('Event {}'.format(eventnum + 1)).gca()
            colors = ["Black", "Blue", "Green"]
            i = 0
            for board in self.channelmatrix:
                for channel in board:
                    if channel.IsChecked():
                    
                        plt = self.data.events[eventnum][board.index(channel)]
                        axes.plot(plt, label="Channel " + str(board.index(channel) + 1), color = colors[i])
                        i += 1
                    else:
                        continue
            axes.set_title("Voltage vs Time")
            axes.set_ylabel("Voltage (V)")
            axes.set_xlabel("Time (ns)")
            axes.legend()
            self.plotter.nb.AdvanceSelection()
            self.Layout()
            self.plotter.Layout()
            

     
    def plotwaveformspec(self, event):
        plt.figure()
        counts, bins = np.histogram(self.data.stats["single_channel"][0]["amplitude"])
        plt.hist(bins[:-1], bins, weights=counts)
#        plt.hist(self.data.stats["single_channel"][0]["amplitude"], 120, density=False, facecolor="g", alpha=0.75)
        plt.xlabel('Amplitude')
        plt.ylabel('Number of Events')
        plt.title('Frequency vs. Amplitude')
#        plt.xlim(0, 20)
 #       plt.ylim(0, 10)
        plt.grid(True)
        plt.plot()
        plt.show()
        return

    def plotchargespec(self, event):
        plt.figure()
        plt.hist(self.data.waveforms, 50, density=True, facecolor="g", alpha=0.75)
        plt.xlabel('Amplitude')
        plt.ylabel('Number of Events')
        plt.title('Frequency vs. Amplitude')
        plt.xlim(0, 20)
        plt.ylim(0, 10)
        plt.grid(True)
        plt.plot()
        plt.show()
        return



class Data:
    def __init__(self, f):
        data = read_data(f)
        self.numboards = 2
        #Nested array, each inner array represents one board, numbers appearing in this array will be indexes according to human (1-8) not (0-7)
        self.loadedchannels = [[], []]
        self.events=data.events
        #Max of 8 channels
        for i in range(8):
            try:
                #See if this is defined, if KeyError, then no data exists in channel i 
                self.events[0][i]
                if i < 4:
                    #Data is present, add its index + 1 (i.e. human index rather than computer)
                    self.loadedchannels[0].append(i + 1)
                else:
                    # Data is present, add its index + 1 (i.e. human index rather than computer)
                    self.loadedchannels[1].append(i+1)
            except KeyError:
                continue
        

        self.stats = data.calc_stats()













#        self.risetimes = [1,3,5,7,9,2,4,6]
#        self.peaktimes = [9,11,13,15,8,10,12,14]
#        self.falltimes = [17,19,21,23,16,18,20,22] 
#        self.charges = [25,27,29,31,24,26,28,30]  
#        self.waveforms = np.array([15,16,17,18,14,15,15,15,16,10,18,15])       






    



def main():
    app=MainApp()
   # wx.lib.inspection.InspectionTool().Show()
    app.MainLoop() 


if __name__ == "__main__":
    main()

