lzma/lzma_decoder.c: In function ‘lzma_decode’:
lzma/lzma_decoder.c:575:7: warning: this statement may fall through [-Wimplicit-fallthrough=]
       --limit;
       ^~~~~~~
lzma/lzma_decoder.c:576:6: note: here
      case 4:
      ^~~~
lzma/lzma_decoder.c:581:7: warning: this statement may fall through [-Wimplicit-fallthrough=]
       --limit;
       ^~~~~~~
lzma/lzma_decoder.c:582:6: note: here
      case 3:
      ^~~~
lzma/lzma_decoder.c:587:7: warning: this statement may fall through [-Wimplicit-fallthrough=]
       --limit;
       ^~~~~~~
lzma/lzma_decoder.c:588:6: note: here
      case 2:
      ^~~~
lzma/lzma_decoder.c:593:7: warning: this statement may fall through [-Wimplicit-fallthrough=]
       --limit;
       ^~~~~~~
lzma/lzma_decoder.c:594:6: note: here
      case 1:
      ^~~~
lzma/lzma_decoder.c:352:13: warning: this statement may fall through [-Wimplicit-fallthrough=]
   pos_state = dict.pos & pos_mask;
   ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~
lzma/lzma_decoder.c:354:2: note: here
  case SEQ_NORMALIZE:
  ^~~~
In file included from lzma/lzma_decoder.c:17:0:
../../src/liblzma/rangecoder/range_decoder.h:132:7: warning: this statement may fall through [-Wimplicit-fallthrough=]
  prob -= (prob) >> RC_MOVE_BITS; \
lzma/lzma_decoder.c:489:3: note: in expansion of macro ‘rc_update_1’
   rc_update_1(coder->is_match[state][pos_state]);
   ^~~~~~~~~~~
lzma/lzma_decoder.c:491:2: note: here
  case SEQ_IS_REP:
  ^~~~
lzma/lzma_decoder.c:690:7: warning: this statement may fall through [-Wimplicit-fallthrough=]
    if (unlikely(!dict_is_distance_valid(&dict, 0))) {
       ^
lzma/lzma_decoder.c:695:2: note: here
  case SEQ_IS_REP0:
  ^~~~
In file included from lzma/lzma_decoder.c:17:0:
../../src/liblzma/rangecoder/range_decoder.h:132:7: warning: this statement may fall through [-Wimplicit-fallthrough=]
  prob -= (prob) >> RC_MOVE_BITS; \
lzma/lzma_decoder.c:724:5: note: in expansion of macro ‘rc_update_1’
     rc_update_1(coder->is_rep0[state]);
     ^~~~~~~~~~~
lzma/lzma_decoder.c:726:2: note: here
  case SEQ_IS_REP1:
  ^~~~
In file included from lzma/lzma_decoder.c:17:0:
../../src/liblzma/rangecoder/range_decoder.h:132:7: warning: this statement may fall through [-Wimplicit-fallthrough=]
  prob -= (prob) >> RC_MOVE_BITS; \
lzma/lzma_decoder.c:739:6: note: in expansion of macro ‘rc_update_1’
      rc_update_1(coder->is_rep1[state]);
      ^~~~~~~~~~~
lzma/lzma_decoder.c:740:2: note: here
  case SEQ_IS_REP2:
  ^~~~
lzma/lzma_decoder.c:113:9: warning: this statement may fall through [-Wimplicit-fallthrough=]
  symbol = 1; \
  ~~~~~~~^~~
lzma/lzma_decoder.c:767:4: note: in expansion of macro ‘len_decode’
    len_decode(len, coder->rep_len_decoder,
    ^~~~~~~~~~
lzma/lzma_decoder.c:114:1: note: here
 case seq ## _CHOICE: \
 ^
lzma/lzma_decoder.c:767:4: note: in expansion of macro ‘len_decode’
    len_decode(len, coder->rep_len_decoder,
    ^~~~~~~~~~
In file included from lzma/lzma_decoder.c:17:0:
../../src/liblzma/rangecoder/range_decoder.h:132:7: warning: this statement may fall through [-Wimplicit-fallthrough=]
  prob -= (prob) >> RC_MOVE_BITS; \
lzma/lzma_decoder.c:122:3: note: in expansion of macro ‘rc_update_1’
   rc_update_1(ld.choice); \
   ^~~~~~~~~~~
lzma/lzma_decoder.c:767:4: note: in expansion of macro ‘len_decode’
    len_decode(len, coder->rep_len_decoder,
    ^~~~~~~~~~
lzma/lzma_decoder.c:123:1: note: here
 case seq ## _CHOICE2: \
 ^
lzma/lzma_decoder.c:767:4: note: in expansion of macro ‘len_decode’
    len_decode(len, coder->rep_len_decoder,
    ^~~~~~~~~~
In file included from lzma/lzma_decoder.c:17:0:
../../src/liblzma/rangecoder/range_decoder.h:132:7: warning: this statement may fall through [-Wimplicit-fallthrough=]
  prob -= (prob) >> RC_MOVE_BITS; \
lzma/lzma_decoder.c:135:4: note: in expansion of macro ‘rc_update_1’
    rc_update_1(ld.choice2); \
    ^~~~~~~~~~~
lzma/lzma_decoder.c:767:4: note: in expansion of macro ‘len_decode’
    len_decode(len, coder->rep_len_decoder,
    ^~~~~~~~~~
../../src/liblzma/rangecoder/range_decoder.h:167:2: note: here
  case seq: rc_bit(prob, action0, action1, seq)
  ^
lzma/lzma_decoder.c:136:4: note: in expansion of macro ‘rc_bit_case’
    rc_bit_case(ld.high[symbol], , , seq ## _HIGH0); \
    ^~~~~~~~~~~
lzma/lzma_decoder.c:767:4: note: in expansion of macro ‘len_decode’
    len_decode(len, coder->rep_len_decoder,
    ^~~~~~~~~~
../../src/liblzma/rangecoder/range_decoder.h:114:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if (rc.code < rc_bound)
     ^
../../src/liblzma/rangecoder/range_decoder.h:142:2: note: in expansion of macro ‘rc_if_0’
  rc_if_0(prob, seq) { \
  ^~~~~~~
../../src/liblzma/rangecoder/range_decoder.h:155:2: note: in expansion of macro ‘rc_bit_last’
  rc_bit_last(prob, \
  ^~~~~~~~~~~
../../src/liblzma/rangecoder/range_decoder.h:167:12: note: in expansion of macro ‘rc_bit’
  case seq: rc_bit(prob, action0, action1, seq)
            ^~~~~~
lzma/lzma_decoder.c:136:4: note: in expansion of macro ‘rc_bit_case’
    rc_bit_case(ld.high[symbol], , , seq ## _HIGH0); \
    ^~~~~~~~~~~
lzma/lzma_decoder.c:767:4: note: in expansion of macro ‘len_decode’
    len_decode(len, coder->rep_len_decoder,
    ^~~~~~~~~~
../../src/liblzma/rangecoder/range_decoder.h:167:2: note: here
  case seq: rc_bit(prob, action0, action1, seq)
  ^
lzma/lzma_decoder.c:137:4: note: in expansion of macro ‘rc_bit_case’
    rc_bit_case(ld.high[symbol], , , seq ## _HIGH1); \
    ^~~~~~~~~~~
lzma/lzma_decoder.c:767:4: note: in expansion of macro ‘len_decode’
    len_decode(len, coder->rep_len_decoder,
    ^~~~~~~~~~
../../src/liblzma/rangecoder/range_decoder.h:114:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if (rc.code < rc_bound)
     ^
../../src/liblzma/rangecoder/range_decoder.h:142:2: note: in expansion of macro ‘rc_if_0’
  rc_if_0(prob, seq) { \
  ^~~~~~~
../../src/liblzma/rangecoder/range_decoder.h:155:2: note: in expansion of macro ‘rc_bit_last’
  rc_bit_last(prob, \
  ^~~~~~~~~~~
../../src/liblzma/rangecoder/range_decoder.h:167:12: note: in expansion of macro ‘rc_bit’
  case seq: rc_bit(prob, action0, action1, seq)
            ^~~~~~
lzma/lzma_decoder.c:137:4: note: in expansion of macro ‘rc_bit_case’
    rc_bit_case(ld.high[symbol], , , seq ## _HIGH1); \
    ^~~~~~~~~~~
lzma/lzma_decoder.c:767:4: note: in expansion of macro ‘len_decode’
    len_decode(len, coder->rep_len_decoder,
    ^~~~~~~~~~
../../src/liblzma/rangecoder/range_decoder.h:167:2: note: here
  case seq: rc_bit(prob, action0, action1, seq)
  ^
lzma/lzma_decoder.c:138:4: note: in expansion of macro ‘rc_bit_case’
    rc_bit_case(ld.high[symbol], , , seq ## _HIGH2); \
    ^~~~~~~~~~~
lzma/lzma_decoder.c:767:4: note: in expansion of macro ‘len_decode’
    len_decode(len, coder->rep_len_decoder,
    ^~~~~~~~~~
../../src/liblzma/rangecoder/range_decoder.h:114:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if (rc.code < rc_bound)
     ^
../../src/liblzma/rangecoder/range_decoder.h:142:2: note: in expansion of macro ‘rc_if_0’
  rc_if_0(prob, seq) { \
  ^~~~~~~
../../src/liblzma/rangecoder/range_decoder.h:155:2: note: in expansion of macro ‘rc_bit_last’
  rc_bit_last(prob, \
  ^~~~~~~~~~~
../../src/liblzma/rangecoder/range_decoder.h:167:12: note: in expansion of macro ‘rc_bit’
  case seq: rc_bit(prob, action0, action1, seq)
            ^~~~~~
lzma/lzma_decoder.c:138:4: note: in expansion of macro ‘rc_bit_case’
    rc_bit_case(ld.high[symbol], , , seq ## _HIGH2); \
    ^~~~~~~~~~~
lzma/lzma_decoder.c:767:4: note: in expansion of macro ‘len_decode’
    len_decode(len, coder->rep_len_decoder,
    ^~~~~~~~~~
../../src/liblzma/rangecoder/range_decoder.h:167:2: note: here
  case seq: rc_bit(prob, action0, action1, seq)
  ^
lzma/lzma_decoder.c:139:4: note: in expansion of macro ‘rc_bit_case’
    rc_bit_case(ld.high[symbol], , , seq ## _HIGH3); \
    ^~~~~~~~~~~
lzma/lzma_decoder.c:767:4: note: in expansion of macro ‘len_decode’
    len_decode(len, coder->rep_len_decoder,
    ^~~~~~~~~~
../../src/liblzma/rangecoder/range_decoder.h:114:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if (rc.code < rc_bound)
     ^
../../src/liblzma/rangecoder/range_decoder.h:142:2: note: in expansion of macro ‘rc_if_0’
  rc_if_0(prob, seq) { \
  ^~~~~~~
../../src/liblzma/rangecoder/range_decoder.h:155:2: note: in expansion of macro ‘rc_bit_last’
  rc_bit_last(prob, \
  ^~~~~~~~~~~
../../src/liblzma/rangecoder/range_decoder.h:167:12: note: in expansion of macro ‘rc_bit’
  case seq: rc_bit(prob, action0, action1, seq)
            ^~~~~~
lzma/lzma_decoder.c:139:4: note: in expansion of macro ‘rc_bit_case’
    rc_bit_case(ld.high[symbol], , , seq ## _HIGH3); \
    ^~~~~~~~~~~
lzma/lzma_decoder.c:767:4: note: in expansion of macro ‘len_decode’
    len_decode(len, coder->rep_len_decoder,
    ^~~~~~~~~~
../../src/liblzma/rangecoder/range_decoder.h:167:2: note: here
  case seq: rc_bit(prob, action0, action1, seq)
  ^
lzma/lzma_decoder.c:140:4: note: in expansion of macro ‘rc_bit_case’
    rc_bit_case(ld.high[symbol], , , seq ## _HIGH4); \
    ^~~~~~~~~~~
lzma/lzma_decoder.c:767:4: note: in expansion of macro ‘len_decode’
    len_decode(len, coder->rep_len_decoder,
    ^~~~~~~~~~
../../src/liblzma/rangecoder/range_decoder.h:114:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if (rc.code < rc_bound)
     ^
../../src/liblzma/rangecoder/range_decoder.h:142:2: note: in expansion of macro ‘rc_if_0’
  rc_if_0(prob, seq) { \
  ^~~~~~~
../../src/liblzma/rangecoder/range_decoder.h:155:2: note: in expansion of macro ‘rc_bit_last’
  rc_bit_last(prob, \
  ^~~~~~~~~~~
../../src/liblzma/rangecoder/range_decoder.h:167:12: note: in expansion of macro ‘rc_bit’
  case seq: rc_bit(prob, action0, action1, seq)
            ^~~~~~
lzma/lzma_decoder.c:140:4: note: in expansion of macro ‘rc_bit_case’
    rc_bit_case(ld.high[symbol], , , seq ## _HIGH4); \
    ^~~~~~~~~~~
lzma/lzma_decoder.c:767:4: note: in expansion of macro ‘len_decode’
    len_decode(len, coder->rep_len_decoder,
    ^~~~~~~~~~
../../src/liblzma/rangecoder/range_decoder.h:167:2: note: here
  case seq: rc_bit(prob, action0, action1, seq)
  ^
lzma/lzma_decoder.c:141:4: note: in expansion of macro ‘rc_bit_case’
    rc_bit_case(ld.high[symbol], , , seq ## _HIGH5); \
    ^~~~~~~~~~~
lzma/lzma_decoder.c:767:4: note: in expansion of macro ‘len_decode’
    len_decode(len, coder->rep_len_decoder,
    ^~~~~~~~~~
../../src/liblzma/rangecoder/range_decoder.h:114:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if (rc.code < rc_bound)
     ^
../../src/liblzma/rangecoder/range_decoder.h:142:2: note: in expansion of macro ‘rc_if_0’
  rc_if_0(prob, seq) { \
  ^~~~~~~
../../src/liblzma/rangecoder/range_decoder.h:155:2: note: in expansion of macro ‘rc_bit_last’
  rc_bit_last(prob, \
  ^~~~~~~~~~~
../../src/liblzma/rangecoder/range_decoder.h:167:12: note: in expansion of macro ‘rc_bit’
  case seq: rc_bit(prob, action0, action1, seq)
            ^~~~~~
lzma/lzma_decoder.c:141:4: note: in expansion of macro ‘rc_bit_case’
    rc_bit_case(ld.high[symbol], , , seq ## _HIGH5); \
    ^~~~~~~~~~~
lzma/lzma_decoder.c:767:4: note: in expansion of macro ‘len_decode’
    len_decode(len, coder->rep_len_decoder,
    ^~~~~~~~~~
../../src/liblzma/rangecoder/range_decoder.h:167:2: note: here
  case seq: rc_bit(prob, action0, action1, seq)
  ^
lzma/lzma_decoder.c:142:4: note: in expansion of macro ‘rc_bit_case’
    rc_bit_case(ld.high[symbol], , , seq ## _HIGH6); \
    ^~~~~~~~~~~
lzma/lzma_decoder.c:767:4: note: in expansion of macro ‘len_decode’
    len_decode(len, coder->rep_len_decoder,
    ^~~~~~~~~~
../../src/liblzma/rangecoder/range_decoder.h:114:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  if (rc.code < rc_bound)
     ^
../../src/liblzma/rangecoder/range_decoder.h:142:2: note: in expansion of macro ‘rc_if_0’
  rc_if_0(prob, seq) { \
  ^~~~~~~
../../src/liblzma/rangecoder/range_decoder.h:155:2: note: in expansion of macro ‘rc_bit_last’
  rc_bit_last(prob, \
  ^~~~~~~~~~~
../../src/liblzma/rangecoder/range_decoder.h:167:12: note: in expansion of macro ‘rc_bit’
  case seq: rc_bit(prob, action0, action1, seq)
            ^~~~~~
lzma/lzma_decoder.c:142:4: note: in expansion of macro ‘rc_bit_case’
    rc_bit_case(ld.high[symbol], , , seq ## _HIGH6); \
    ^~~~~~~~~~~
lzma/lzma_decoder.c:767:4: note: in expansion of macro ‘len_decode’
    len_decode(len, coder->rep_len_decoder,
    ^~~~~~~~~~
../../src/liblzma/rangecoder/range_decoder.h:167:2: note: here
  case seq: rc_bit(prob, action0, action1, seq)
  ^
lzma/lzma_decoder.c:143:4: note: in expansion of macro ‘rc_bit_case’
    rc_bit_case(ld.high[symbol], , , seq ## _HIGH7); \
    ^~~~~~~~~~~
lzma/lzma_decoder.c:767:4: note: in expansion of macro ‘len_decode’
    len_decode(len, coder->rep_len_decoder,
    ^~~~~~~~~~
lzma/lzma_decoder.c:144:11: warning: this statement may fall through [-Wimplicit-fallthrough=]
    target = symbol - LEN_HIGH_SYMBOLS \
lzma/lzma_decoder.c:767:4: note: in expansion of macro ‘len_decode’
    len_decode(len, coder->rep_len_decoder,
    ^~~~~~~~~~
lzma/lzma_decoder.c:780:2: note: here
  case SEQ_COPY:
  ^~~~
ar: `u' modifier ignored since `D' is the default (see `U')
file_io.c: In function ‘io_read’:
file_io.c:1028:24: warning: logical ‘or’ of equal expressions [-Wlogical-op]
    if (errno == EAGAIN || errno == EWOULDBLOCK) {
                        ^~
file_io.c: In function ‘io_write_buf’:
file_io.c:1116:24: warning: logical ‘or’ of equal expressions [-Wlogical-op]
    if (errno == EAGAIN || errno == EWOULDBLOCK) {
                        ^~
list.c: In function ‘parse_block_header’:
list.c:480:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
   if (block.uncompressed_size == LZMA_VLI_UNKNOWN
       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     || block.uncompressed_size
     ^~~~~~~~~~~~~~~~~~~~~~~~~~
      == iter->block.uncompressed_size)
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
list.c:487:2: note: here
  case LZMA_DATA_ERROR:
  ^~~~
