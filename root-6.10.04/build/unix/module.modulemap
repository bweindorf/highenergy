// This can be used in C mode. It cannot go in ROOT_Type because ThreadLocalStorage.h
// uses kFALSE and kTRUE, which come from Rtypes.h causing a cycle.
// FIXME: This should be separated because it introduces header dependency
// libThread->libCore->libThread. We should figure out a way to implement it in
// a more reasonable way.
module ThreadLocalStorage {
  header "ThreadLocalStorage.h"
  export *
}
// These can be used in C mode.
module ROOT_Types {
  module "RtypesCore.h" { header "RtypesCore.h" export * }
  module "ESTLType.h" { header "ESTLType.h" export * }
  // FIXME: This module should contain only header files with types.
  // The listed below headers are here because we want them to work in both
  // -frtti and -fno-rtti environment. Move them into a separate module.
  module "RStringView.h" { header "RStringView.h" export * }
  module "Varargs.h" { header "Varargs.h" export * } // Old should revisit, either drop or delete.
  module "TClassEdit.h" { header "TClassEdit.h" export * }
  module "strlcpy.h" { header "strlcpy.h" export * }
  module "RConfig.h" { textual header "RConfig.h" export * }
  module "RConfigure.h" { textual header "RConfigure.h" export * }
  module "RVersion.h" { textual header "RVersion.h" export * }
  // This should go in RConfig.h as it defines macros.
  module "TException.h" { textual header "TException.h" export * }
  export *
}

module ROOT_IsAProxy {
 module "TIsAProxy.h" { header "TIsAProxy.h" export * }
 module "TVirtualIsAProxy.h" { header "TVirtualIsAProxy.h" export * }
 export *
}

// This module is special, it contains headers which don't require rtti support
// to build (eg. don't use dynamic_cast or typeid). They are also needed when
// compiling rootcling with -fno-rtti. We have to keep them outside module ROOT
// to avoid -fno-rtti invocation to trigger building of entire module ROOT
// some of whose headers require -frtti.
// Rtypes.h however has an optional dependency on rtti unless one defines
// R__NO_INLINE_CLASSDEF. We therefore keep two versions of this module: One
// with rtti and one without rtti.
module ROOT_Core_Config_C {
 //requires cplusplus
 
 exclude header "RtypesImp.h"
 module "Rtypes.h" { header "Rtypes.h" export * }
 module "DllImport.h" { header "DllImport.h" export * } // Should merge in RConfig.h.
 module "TGenericClassInfo.h" { header "TGenericClassInfo.h" export * }
 module "TSchemaHelper.h" { header "TSchemaHelper.h" export * }
 module "RootMetaSelection.h" { header "RootMetaSelection.h" export * }
 module "snprintf.h" { header "snprintf.h" export * } // #included by Rtypes, could go away?

 // Should we marked textual because of inclusion libcpp_string_view.h,
 // using macros to set up the header file.
 module "RWrap_libcpp_string_view.h" {  textual header "RWrap_libcpp_string_view.h" export * }

 export *
}

// Some frameworks include gl.h or gltypes.h (eg. Cocoa) and thus we cannot build
// this module as part of the ROOT. The only way is either by outlining it here
// or relying on fragile module ordering (eg. order before things such as Cocoa.h
// including gltypes.h.
// FIXME: We can switch back to using umbrella folder and submodules once
// https://llvm.org/bugs/show_bug.cgi?id=30508 gets resolved.
// module ROOT_Glew {
  // Depending on the platform we get some of these three installed.
  module "glew.h" { header "GL/glew.h" export * }
  module "wglew.h" { header "GL/wglew.h" export * }
  module "glxew.h" { header "GL/glxew.h" export * }
//  link "lib/libGLEW.so"
//}

// From this point on the contents of this file are automatically generated.
